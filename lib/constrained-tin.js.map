{"version":3,"sources":["../src/constrained-tin.js"],"names":["Point","x","y","p1","s","toFixed","p","cross","vec0","vec1","getPointOrientation","edge","vec_edge01","sub","vec_edge0_to_p","fieldOrigin","fieldSize","boundingTriangleSize","binSorter","a","b","bin","isQuadConvex","p0","p2","p3","diag0","diag1","isEdgeIntersecting","isSameEdge","edge0","edge1","edgeA","edgeB","vecA0A1","vecA0B0","vecA0B1","AxB0","AxB1","vecB0B1","vecB0A0","vecB0A1","BxA0","BxA1","Math","abs","max","min","setupDelaunay","meshData","nVertex","vert","length","nBinsX","round","pow","scaledverts","bin_index","i","scaled_x","scaled_y","push","ind_i","ind_j","bin_id","ind","D","sqrt","sort","scaled_vert","tri","adj","vert_to_tri","delaunay","verts","bins","triangles","adjacency","N","ind_tri","new_i","res","findEnclosingTriangle","cur_tri","new_tri0","new_tri1","new_tri2","N_tri","cur_tri_adj","stack","neigh_adj_ind","indexOf","restoreDelaunay","removeBoundaryTriangles","target_vertex","ind_tri_cur","vertices","max_hops","nhops","found_tri","path","tri_cur","orients","base_ind","iedge","base_p1_ind","base_p2_ind","add","scale","dot","ind_vert","v_new","ind_tri_pair","pop","ind_tri_vert","v_tri","isDelaunay2","outernode_tri","ind_tri_neigh","swapDiagonal","new_node_ind_tri","ind_tri_outerp2","neigh_node","new_node_ind_tri_neigh","ind_tri_neigh_outer","ind_triA","ind_triB","vert2tri","outernode_triA","outernode_triB","outernode_triA_p1","outernode_triA_p2","outernode_triB_p1","outernode_triB_p2","ind_triA_neigh_outerp1","ind_triB_neigh_outerp1","local_ind","splice","del_count","indmap","prev_del_count","j","del_length","vecp0","vecp1","vecp2","p0_sq","p1_sq","p2_sq","det","constrainEdges","con_edge","buildVertexConnectivity","con_edges","newEdgeList","intersections","getEdgeIntersections","iter","maxIter","fixEdgeIntersections","num_diagonal_swaps","new_edge_nodes","is_con_edge","jedge","tri_around_v0","tri_count","tri_ind_pair","itri","triA_verts","outer_nodeB_ind","triB_vert","outer_nodeA_ind","vConnectivity","node","undefined","edge_v0_ind","edge_v1_ind","edge_coords","edge_in_triangulation","v0_node","v0p1_node","v0p2_node","opposite_edge_coords","prev_intersection","tri_ind","prev_edge_ind","offset","v1_node","cur_edge_coords","intersectionList","con_edge_ind","con_edge_nodes","cur_con_edge_coords","nIntersections","tri0_ind","tri0_node","tri1_ind","tri1_node","quad_v0","quad_v1","quad_v2","quad_v3","isConvex","newDiagonal_nodes","newDiagonal_coords","hasCommonNode","loadEdges","edges","isEdgeValid","newEdge","edgeList","new_edge_verts","edge_verts","points","z","type","Array","isArray","isPointZ","xyzs","features","reduce","prev","point","xy","geometry","coordinates","properties","xMax","apply","xMin","yMax","yMin","xDiff","xCenter","yDiff","yCenter","maxDiff","normPoints","map","normXy","keys","indices","coords","index","coord"],"mappings":"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","sourcesContent":["// This library is based on\r\n// https://savithru-j.github.io/cdt-js/\r\n// Copyright 2018 Savithru Jayasinghe\r\n// Licensed under the MIT License\r\n\r\n// A fast algorithm for generating constrained delaunay triangulations\r\n// https://www.sciencedirect.com/science/article/pii/004579499390239A\r\n// A robust efficient algorithm for point location in triangulations\r\n// https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-728.pdf\r\n\r\nimport {polygon, featureCollection} from '@turf/helpers';\r\n\r\nclass Point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    dot(p1) {\r\n        return (this.x * p1.x + this.y * p1.y);\r\n    }\r\n\r\n    add(p1) {\r\n        return new Point(this.x + p1.x, this.y + p1.y);\r\n    }\r\n\r\n    sub(p1) {\r\n        return new Point(this.x - p1.x, this.y - p1.y);\r\n    }\r\n\r\n    scale(s) {\r\n        return new Point(this.x * s, this.y * s);\r\n    }\r\n\r\n    sqDistanceTo(p1) {\r\n        return (this.x - p1.x) * (this.x - p1.x) + (this.y - p1.y) * (this.y - p1.y);\r\n    }\r\n\r\n    toStr() {\r\n        return `(${this.x.toFixed(3)}, ${this.y.toFixed(3)})`;\r\n    }\r\n\r\n    copyFrom(p) {\r\n        this.x = p.x;\r\n        this.y = p.y;\r\n    }\r\n}\r\n\r\nfunction cross(vec0, vec1) {\r\n    return (vec0.x * vec1.y - vec0.y * vec1.x);\r\n}\r\n\r\nfunction getPointOrientation(edge, p) {\r\n    const vec_edge01 = edge[1].sub(edge[0]);\r\n    const vec_edge0_to_p = p.sub(edge[0]);\r\n    return cross(vec_edge01, vec_edge0_to_p);\r\n}\r\n\r\n//Some variables for rendering\r\n\r\nconst fieldOrigin = new Point(0.0, 0.0);//new Point(-16000000, -16000000);\r\nconst fieldSize = 1.0;//32000000;\r\nconst boundingTriangleSize = 1000;//1000000000;\r\n\r\nfunction binSorter(a, b) {\r\n    if (a.bin == b.bin) {\r\n        return 0;\r\n    } else {\r\n        return a.bin < b.bin ? -1 : 1;\r\n    }\r\n}\r\n\r\nfunction isQuadConvex(p0, p1, p2, p3) {\r\n    const diag0 = [p0, p2];\r\n    const diag1 = [p1, p3];\r\n\r\n    return isEdgeIntersecting(diag0, diag1);\r\n}\r\n\r\nfunction isSameEdge(edge0, edge1) {\r\n    return ((edge0[0] == edge1[0] && edge0[1] == edge1[1]) ||\r\n        (edge0[1] == edge1[0] && edge0[0] == edge1[1]))\r\n}\r\n\r\nfunction isEdgeIntersecting(edgeA, edgeB) {\r\n    const vecA0A1 = edgeA[1].sub(edgeA[0]);\r\n    const vecA0B0 = edgeB[0].sub(edgeA[0]);\r\n    const vecA0B1 = edgeB[1].sub(edgeA[0]);\r\n\r\n    const AxB0 = cross(vecA0A1, vecA0B0);\r\n    const AxB1 = cross(vecA0A1, vecA0B1);\r\n\r\n    //Check if the endpoints of edgeB are on the same side of edgeA\r\n    if ((AxB0 > 0 && AxB1 > 0) || (AxB0 < 0 && AxB1 < 0))\r\n        return false;\r\n\r\n    const vecB0B1 = edgeB[1].sub(edgeB[0]);\r\n    const vecB0A0 = edgeA[0].sub(edgeB[0]);\r\n    const vecB0A1 = edgeA[1].sub(edgeB[0]);\r\n\r\n    const BxA0 = cross(vecB0B1, vecB0A0);\r\n    const BxA1 = cross(vecB0B1, vecB0A1);\r\n\r\n    //Check if the endpoints of edgeA are on the same side of edgeB\r\n    if ((BxA0 > 0 && BxA1 > 0) || (BxA0 < 0 && BxA1 < 0))\r\n        return false;\r\n\r\n    //Special case of colinear edges\r\n    if (Math.abs(AxB0) < 1e-14 && Math.abs(AxB1) < 1e-14) {\r\n        //Separated in x\r\n        if ((Math.max(edgeB[0].x, edgeB[1].x) < Math.min(edgeA[0].x, edgeA[1].x)) ||\r\n            (Math.min(edgeB[0].x, edgeB[1].x) > Math.max(edgeA[0].x, edgeA[1].x)))\r\n            return false;\r\n\r\n        //Separated in y\r\n        if ((Math.max(edgeB[0].y, edgeB[1].y) < Math.min(edgeA[0].y, edgeA[1].y)) ||\r\n            (Math.min(edgeB[0].y, edgeB[1].y) > Math.max(edgeA[0].y, edgeA[1].y)))\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction setupDelaunay(meshData) {\r\n    const nVertex = meshData.vert.length;\r\n    const nBinsX = Math.round(Math.pow(nVertex, 0.25));\r\n\r\n    //Compute scaled vertex coordinates and assign each vertex to a bin\r\n    const scaledverts = [];\r\n    const bin_index = [];\r\n    for (let i = 0; i < nVertex; i++) {\r\n        const scaled_x = (meshData.vert[i].x - fieldOrigin.x) / fieldSize;\r\n        const scaled_y = (meshData.vert[i].y - fieldOrigin.y) / fieldSize;\r\n        scaledverts.push(new Point(scaled_x, scaled_y));\r\n\r\n        const ind_i = Math.round((nBinsX - 1) * scaled_x);\r\n        const ind_j = Math.round((nBinsX - 1) * scaled_y);\r\n\r\n        let bin_id;\r\n        if (ind_j % 2 === 0) {\r\n            bin_id = ind_j * nBinsX + ind_i;\r\n        } else {\r\n            bin_id = (ind_j + 1) * nBinsX - ind_i - 1;\r\n        }\r\n        bin_index.push({ind: i, bin: bin_id});\r\n    }\r\n\r\n\r\n    //Add super-triangle vertices (far away)\r\n    const D = boundingTriangleSize;\r\n    scaledverts.push(new Point(-D + 0.5, -D / Math.sqrt(3) + 0.5));\r\n    scaledverts.push(new Point(D + 0.5, -D / Math.sqrt(3) + 0.5));\r\n    scaledverts.push(new Point(0.5, 2 * D / Math.sqrt(3) + 0.5));\r\n\r\n    for (let i = nVertex; i < nVertex + 3; i++)\r\n        meshData.vert.push(new Point(fieldSize * scaledverts[i].x + fieldOrigin.x, fieldSize * scaledverts[i].y + fieldOrigin.y));\r\n\r\n    //Sort the vertices in ascending bin order\r\n    bin_index.sort(binSorter);\r\n\r\n    meshData.scaled_vert = scaledverts;\r\n    meshData.bin = bin_index;\r\n\r\n    //Super-triangle connectivity\r\n    meshData.tri = [[nVertex, (nVertex + 1), (nVertex + 2)]];\r\n    meshData.adj = [[-1, -1, -1]];\r\n\r\n    meshData.vert_to_tri = [];\r\n}\r\n\r\n//Function for computing the unconstrained Delaunay triangulation\r\nfunction delaunay(meshData) {\r\n    //Sort input vertices and setup super-triangle\r\n    setupDelaunay(meshData);\r\n\r\n    const verts = meshData.scaled_vert;\r\n    const bins = meshData.bin;\r\n    const triangles = meshData.tri;\r\n    const adjacency = meshData.adj;\r\n\r\n    const N = verts.length - 3; //vertices includes super-triangle nodes\r\n\r\n    let ind_tri = 0; //points to the super-triangle\r\n\r\n    for (let i = 0; i < N; i++) {\r\n        const new_i = bins[i].ind;\r\n\r\n        const res = findEnclosingTriangle(verts[new_i], meshData, ind_tri);\r\n        ind_tri = res[0];\r\n\r\n        if (ind_tri === -1)\r\n            throw \"Could not find a triangle containing the new vertex!\";\r\n\r\n        const cur_tri = triangles[ind_tri]; //vertex indices of triangle containing new point\r\n        const new_tri0 = [cur_tri[0], cur_tri[1], new_i];\r\n        const new_tri1 = [new_i, cur_tri[1], cur_tri[2]];\r\n        const new_tri2 = [cur_tri[0], new_i, cur_tri[2]];\r\n\r\n        //Replace the triangle containing the point with new_tri0, and\r\n        //fix its adjacency\r\n        triangles[ind_tri] = new_tri0;\r\n\r\n        const N_tri = triangles.length;\r\n        const cur_tri_adj = adjacency[ind_tri]; //neighbors of cur_tri\r\n        adjacency[ind_tri] = [N_tri, N_tri + 1, cur_tri_adj[2]];\r\n\r\n        //Add the other two new triangles to the list\r\n        triangles.push(new_tri1); //triangle index N_tri\r\n        triangles.push(new_tri2); //triangle index (N_tri+1)\r\n\r\n        adjacency.push([cur_tri_adj[0], N_tri + 1, ind_tri]); //adj for triangle N_tri\r\n        adjacency.push([N_tri, cur_tri_adj[1], ind_tri]); //adj for triangle (N_tri+1)\r\n\r\n        //stack of triangles which need to be checked for Delaunay condition\r\n        //each element contains: [index of tri to check, adjncy index to goto triangle that contains new point]\r\n        const stack = [];\r\n\r\n        if (cur_tri_adj[2] >= 0) //if triangle cur_tri's neighbor exists\r\n        {\r\n            //Find the index for cur_tri in the adjacency of the neighbor\r\n            const neigh_adj_ind = adjacency[cur_tri_adj[2]].indexOf(ind_tri);\r\n\r\n            //No need to update adjacency, but push the neighbor on to the stack\r\n            stack.push([cur_tri_adj[2], neigh_adj_ind]);\r\n        }\r\n        if (cur_tri_adj[0] >= 0) //if triangle N_tri's neighbor exists\r\n        {\r\n            //Find the index for cur_tri in the adjacency of the neighbor\r\n            const neigh_adj_ind = adjacency[cur_tri_adj[0]].indexOf(ind_tri);\r\n            adjacency[cur_tri_adj[0]][neigh_adj_ind] = N_tri;\r\n            stack.push([cur_tri_adj[0], neigh_adj_ind]);\r\n        }\r\n\r\n        if (cur_tri_adj[1] >= 0) //if triangle (N_tri+1)'s neighbor exists\r\n        {\r\n            //Find the index for cur_tri in the adjacency of the neighbor\r\n            const neigh_adj_ind = adjacency[cur_tri_adj[1]].indexOf(ind_tri);\r\n            adjacency[cur_tri_adj[1]][neigh_adj_ind] = N_tri + 1;\r\n            stack.push([cur_tri_adj[1], neigh_adj_ind]);\r\n        }\r\n\r\n        restoreDelaunay(new_i, meshData, stack);\r\n\r\n    } //loop over vertices\r\n\r\n    removeBoundaryTriangles(meshData);\r\n}\r\n\r\n//Uses edge orientations - based on Peter Brown's Technical Report 1997\r\nfunction findEnclosingTriangle(target_vertex, meshData, ind_tri_cur) {\r\n    const vertices = meshData.scaled_vert;\r\n    const triangles = meshData.tri;\r\n    const adjacency = meshData.adj;\r\n    const max_hops = Math.max(10, adjacency.length);\r\n\r\n    let nhops = 0;\r\n    const found_tri = false;\r\n    const path = [];\r\n\r\n    while (!found_tri && nhops < max_hops) {\r\n        if (ind_tri_cur === -1) //target is outside triangulation\r\n            return [ind_tri_cur, nhops];\r\n\r\n        const tri_cur = triangles[ind_tri_cur];\r\n\r\n        //Orientation of target wrt each edge of triangle (positive if on left of edge)\r\n        const orients = [getPointOrientation([vertices[tri_cur[1]], vertices[tri_cur[2]]], target_vertex),\r\n            getPointOrientation([vertices[tri_cur[2]], vertices[tri_cur[0]]], target_vertex),\r\n            getPointOrientation([vertices[tri_cur[0]], vertices[tri_cur[1]]], target_vertex)];\r\n\r\n        if (orients[0] >= 0 && orients[1] >= 0 && orients[2] >= 0) //target is to left of all edges, so inside tri\r\n            return [ind_tri_cur, nhops];\r\n\r\n        let base_ind = -1;\r\n        for (let iedge = 0; iedge < 3; iedge++) {\r\n            if (orients[iedge] >= 0) {\r\n                base_ind = iedge;\r\n                break;\r\n            }\r\n        }\r\n        const base_p1_ind = (base_ind + 1) % 3;\r\n        const base_p2_ind = (base_ind + 2) % 3;\r\n\r\n        if (orients[base_p1_ind] >= 0 && orients[base_p2_ind] < 0) {\r\n            ind_tri_cur = adjacency[ind_tri_cur][base_p2_ind]; //should move to the triangle opposite base_p2_ind\r\n            path[nhops] = vertices[tri_cur[base_ind]].add(vertices[tri_cur[base_p1_ind]]).scale(0.5);\r\n        } else if (orients[base_p1_ind] < 0 && orients[base_p2_ind] >= 0) {\r\n            ind_tri_cur = adjacency[ind_tri_cur][base_p1_ind]; //should move to the triangle opposite base_p1_ind\r\n            path[nhops] = vertices[tri_cur[base_p2_ind]].add(vertices[tri_cur[base_ind]]).scale(0.5);\r\n        } else {\r\n            const vec0 = vertices[tri_cur[base_p1_ind]].sub(vertices[tri_cur[base_ind]]); //vector from base_ind to base_p1_ind\r\n            const vec1 = target_vertex.sub(vertices[tri_cur[base_ind]]); //vector from base_ind to target_vertex\r\n            if (vec0.dot(vec1) > 0) {\r\n                ind_tri_cur = adjacency[ind_tri_cur][base_p2_ind]; //should move to the triangle opposite base_p2_ind\r\n                path[nhops] = vertices[tri_cur[base_ind]].add(vertices[tri_cur[base_p1_ind]]).scale(0.5);\r\n            } else {\r\n                ind_tri_cur = adjacency[ind_tri_cur][base_p1_ind]; //should move to the triangle opposite base_p1_ind\r\n                path[nhops] = vertices[tri_cur[base_p2_ind]].add(vertices[tri_cur[base_ind]]).scale(0.5);\r\n            }\r\n        }\r\n\r\n        nhops++;\r\n    }\r\n\r\n    if (!found_tri) {\r\n        throw `Could not locate the triangle that encloses (${target_vertex.x}, ${target_vertex.y})!`;\r\n    }\r\n\r\n    return [ind_tri_cur, (nhops - 1)];\r\n}\r\n\r\nfunction restoreDelaunay(ind_vert, meshData, stack) {\r\n    const vertices = meshData.scaled_vert;\r\n    const triangles = meshData.tri;\r\n    const adjacency = meshData.adj;\r\n    const v_new = vertices[ind_vert];\r\n\r\n    while (stack.length > 0) {\r\n        const ind_tri_pair = stack.pop(); //[index of tri to check, adjncy index to goto triangle that contains new point]\r\n        const ind_tri = ind_tri_pair[0];\r\n\r\n        const ind_tri_vert = triangles[ind_tri]; //vertex indices of the triangle\r\n        const v_tri = [];\r\n        for (let i = 0; i < 3; i++)\r\n            v_tri[i] = vertices[ind_tri_vert[i]];\r\n\r\n        if (!isDelaunay2(v_tri, v_new)) {\r\n            //v_new lies inside the circumcircle of the triangle, so need to swap diagonals\r\n\r\n            const outernode_tri = ind_tri_pair[1]; // [0,1,2] node-index of vertex that's not part of the common edge\r\n            const ind_tri_neigh = adjacency[ind_tri][outernode_tri];\r\n\r\n            if (ind_tri_neigh < 0)\r\n                throw \"negative index\";\r\n\r\n            //Swap the diagonal between the adjacent triangles\r\n            swapDiagonal(meshData, ind_tri, ind_tri_neigh);\r\n\r\n            //Add the triangles opposite the new vertex to the stack\r\n            const new_node_ind_tri = triangles[ind_tri].indexOf(ind_vert);\r\n            const ind_tri_outerp2 = adjacency[ind_tri][new_node_ind_tri];\r\n            if (ind_tri_outerp2 >= 0) {\r\n                const neigh_node = adjacency[ind_tri_outerp2].indexOf(ind_tri);\r\n                stack.push([ind_tri_outerp2, neigh_node]);\r\n            }\r\n\r\n            const new_node_ind_tri_neigh = triangles[ind_tri_neigh].indexOf(ind_vert);\r\n            const ind_tri_neigh_outer = adjacency[ind_tri_neigh][new_node_ind_tri_neigh];\r\n            if (ind_tri_neigh_outer >= 0) {\r\n                const neigh_node = adjacency[ind_tri_neigh_outer].indexOf(ind_tri_neigh);\r\n                stack.push([ind_tri_neigh_outer, neigh_node]);\r\n            }\r\n\r\n        } //is not Delaunay\r\n    }\r\n}\r\n\r\n//Swaps the diagonal of adjacent triangles A and B\r\nfunction swapDiagonal(meshData, ind_triA, ind_triB) {\r\n    const triangles = meshData.tri;\r\n    const adjacency = meshData.adj;\r\n    const vert2tri = meshData.vert_to_tri;\r\n\r\n    //Find the node index of the outer vertex in each triangle\r\n    const outernode_triA = adjacency[ind_triA].indexOf(ind_triB);\r\n    const outernode_triB = adjacency[ind_triB].indexOf(ind_triA);\r\n\r\n    //Indices of nodes after the outernode (i.e. nodes of the common edge)\r\n    const outernode_triA_p1 = (outernode_triA + 1) % 3;\r\n    const outernode_triA_p2 = (outernode_triA + 2) % 3;\r\n\r\n    const outernode_triB_p1 = (outernode_triB + 1) % 3;\r\n    const outernode_triB_p2 = (outernode_triB + 2) % 3;\r\n\r\n    //Update triangle nodes\r\n    triangles[ind_triA][outernode_triA_p2] = triangles[ind_triB][outernode_triB];\r\n    triangles[ind_triB][outernode_triB_p2] = triangles[ind_triA][outernode_triA];\r\n\r\n    //Update adjacencies for triangle opposite outernode\r\n    adjacency[ind_triA][outernode_triA] = adjacency[ind_triB][outernode_triB_p1];\r\n    adjacency[ind_triB][outernode_triB] = adjacency[ind_triA][outernode_triA_p1];\r\n\r\n    //Update adjacency of neighbor opposite triangle A's (outernode+1) node\r\n    const ind_triA_neigh_outerp1 = adjacency[ind_triA][outernode_triA_p1];\r\n    if (ind_triA_neigh_outerp1 >= 0) {\r\n        const neigh_node = adjacency[ind_triA_neigh_outerp1].indexOf(ind_triA);\r\n        adjacency[ind_triA_neigh_outerp1][neigh_node] = ind_triB;\r\n    }\r\n\r\n    //Update adjacency of neighbor opposite triangle B's (outernode+1) node\r\n    const ind_triB_neigh_outerp1 = adjacency[ind_triB][outernode_triB_p1];\r\n    if (ind_triB_neigh_outerp1 >= 0) {\r\n        const neigh_node = adjacency[ind_triB_neigh_outerp1].indexOf(ind_triB);\r\n        adjacency[ind_triB_neigh_outerp1][neigh_node] = ind_triA;\r\n    }\r\n\r\n    //Update adjacencies for triangles opposite the (outernode+1) node\r\n    adjacency[ind_triA][outernode_triA_p1] = ind_triB;\r\n    adjacency[ind_triB][outernode_triB_p1] = ind_triA;\r\n\r\n    //Update vertex to triangle connectivity, if data structure exists\r\n    if (vert2tri.length > 0) {\r\n        //The original outernodes will now be part of both triangles\r\n        vert2tri[triangles[ind_triA][outernode_triA]].push(ind_triB);\r\n        vert2tri[triangles[ind_triB][outernode_triB]].push(ind_triA);\r\n\r\n        //Remove triangle B from the triangle set of outernode_triA_p1\r\n        let local_ind = vert2tri[triangles[ind_triA][outernode_triA_p1]].indexOf(ind_triB);\r\n        vert2tri[triangles[ind_triA][outernode_triA_p1]].splice(local_ind, 1);\r\n\r\n        //Remove triangle A from the triangle set of outernode_triB_p1\r\n        local_ind = vert2tri[triangles[ind_triB][outernode_triB_p1]].indexOf(ind_triA);\r\n        vert2tri[triangles[ind_triB][outernode_triB_p1]].splice(local_ind, 1);\r\n    }\r\n}\r\n\r\nfunction removeBoundaryTriangles(meshData) {\r\n    const verts = meshData.scaled_vert;\r\n    const triangles = meshData.tri;\r\n    const adjacency = meshData.adj;\r\n    const N = verts.length - 3;\r\n\r\n    let del_count = 0;\r\n    const indmap = [];\r\n    for (let i = 0; i < triangles.length; i++) {\r\n        const prev_del_count = del_count;\r\n        for (let j = i; j < triangles.length; j++) {\r\n            if (triangles[j][0] < N && triangles[j][1] < N && triangles[j][2] < N) {\r\n                indmap[i + del_count] = i;\r\n                break;\r\n            } else {\r\n                indmap[i + del_count] = -1;\r\n                del_count++;\r\n            }\r\n        }\r\n\r\n        const del_length = del_count - prev_del_count;\r\n        if (del_length > 0) {\r\n            triangles.splice(i, del_length);\r\n            adjacency.splice(i, del_length);\r\n        }\r\n    }\r\n\r\n    //Update adjacencies\r\n    for (let i = 0; i < adjacency.length; i++)\r\n        for (let j = 0; j < 3; j++)\r\n            adjacency[i][j] = indmap[adjacency[i][j]];\r\n\r\n    //Delete super-triangle nodes\r\n    meshData.scaled_vert.splice(-3, 3);\r\n    meshData.vert.splice(-3, 3);\r\n}\r\n\r\nfunction isDelaunay2(v_tri, p) {\r\n    const vecp0 = v_tri[0].sub(p);\r\n    const vecp1 = v_tri[1].sub(p);\r\n    const vecp2 = v_tri[2].sub(p);\r\n\r\n    const p0_sq = vecp0.x * vecp0.x + vecp0.y * vecp0.y;\r\n    const p1_sq = vecp1.x * vecp1.x + vecp1.y * vecp1.y;\r\n    const p2_sq = vecp2.x * vecp2.x + vecp2.y * vecp2.y;\r\n\r\n    const det = vecp0.x * (vecp1.y * p2_sq - p1_sq * vecp2.y)\r\n        - vecp0.y * (vecp1.x * p2_sq - p1_sq * vecp2.x)\r\n        + p0_sq * (vecp1.x * vecp2.y - vecp1.y * vecp2.x);\r\n\r\n    if (det > 0) //p is inside circumcircle of v_tri\r\n        return false;\r\n    else\r\n        return true;\r\n}\r\n\r\nfunction constrainEdges(meshData) {\r\n    if (meshData.con_edge.length == 0)\r\n        return;\r\n\r\n    buildVertexConnectivity(meshData);\r\n\r\n    const con_edges = meshData.con_edge;\r\n    const triangles = meshData.tri;\r\n    const verts = meshData.scaled_vert;\r\n    const adjacency = meshData.adj;\r\n    const vert2tri = meshData.vert_to_tri;\r\n\r\n    const newEdgeList = [];\r\n\r\n    for (let iedge = 0; iedge < con_edges.length; iedge++) {\r\n        let intersections = getEdgeIntersections(meshData, iedge);\r\n\r\n        let iter = 0;\r\n        const maxIter = Math.max(intersections.length, 1);\r\n        while (intersections.length > 0 && iter < maxIter) {\r\n            fixEdgeIntersections(meshData, intersections, iedge, newEdgeList);\r\n            intersections = getEdgeIntersections(meshData, iedge);\r\n            iter++;\r\n        }\r\n\r\n        if (intersections.length > 0)\r\n            throw `Could not add edge ${iedge} to triangulation after ${maxIter} iterations!`;\r\n\r\n    } //loop over constrained edges\r\n\r\n\r\n    //Restore Delaunay\r\n    while (true) { // eslint-disable-line no-constant-condition\r\n        let num_diagonal_swaps = 0;\r\n        for (let iedge = 0; iedge < newEdgeList.length; iedge++) {\r\n            const new_edge_nodes = newEdgeList[iedge];\r\n\r\n            //Check if the new edge is a constrained edge\r\n            let is_con_edge = false\r\n            for (let jedge = 0; jedge < con_edges.length; jedge++) {\r\n                if (isSameEdge(new_edge_nodes, con_edges[jedge])) {\r\n                    is_con_edge = true;\r\n                    break;\r\n                }\r\n                \r\n            }\r\n\r\n            if (is_con_edge)\r\n                continue; //cannot change this edge if it's constrained\r\n\r\n            const tri_around_v0 = vert2tri[new_edge_nodes[0]];\r\n            let tri_count = 0;\r\n            const tri_ind_pair = [-1, -1]; //indices of the triangles on either side of this edge\r\n            for (let itri = 0; itri < tri_around_v0.length; itri++) {\r\n                const cur_tri = triangles[tri_around_v0[itri]];\r\n                if (cur_tri[0] == new_edge_nodes[1] || cur_tri[1] == new_edge_nodes[1] || cur_tri[2] == new_edge_nodes[1]) {\r\n                    tri_ind_pair[tri_count] = tri_around_v0[itri];\r\n                    tri_count++;\r\n\r\n                    if (tri_count == 2)\r\n                        break; //found both neighboring triangles\r\n                }\r\n            }\r\n\r\n            if (tri_ind_pair[0] == -1)\r\n                continue; //this edge no longer exists, so nothing to do.\r\n\r\n            const triA_verts = [verts[triangles[tri_ind_pair[0]][0]],\r\n                verts[triangles[tri_ind_pair[0]][1]],\r\n                verts[triangles[tri_ind_pair[0]][2]]];\r\n\r\n            const outer_nodeB_ind = adjacency[tri_ind_pair[1]].indexOf(tri_ind_pair[0]);\r\n            const triB_vert = verts[triangles[tri_ind_pair[1]][outer_nodeB_ind]];\r\n\r\n            if (!isDelaunay2(triA_verts, triB_vert)) {\r\n                const outer_nodeA_ind = adjacency[tri_ind_pair[0]].indexOf(tri_ind_pair[1]);\r\n\r\n                //Swap the diagonal between the pair of triangles\r\n                swapDiagonal(meshData, tri_ind_pair[0], tri_ind_pair[1]);\r\n                num_diagonal_swaps++;\r\n\r\n                //Replace current new edge with the new diagonal\r\n                newEdgeList[iedge] = [triangles[tri_ind_pair[0]][outer_nodeA_ind],\r\n                    triangles[tri_ind_pair[1]][outer_nodeB_ind]];\r\n            }\r\n\r\n        } //loop over new edges\r\n\r\n        if (num_diagonal_swaps == 0)\r\n            break; //no further swaps, we're done.\r\n    }\r\n}\r\n\r\nfunction buildVertexConnectivity(meshData) {\r\n    const triangles = meshData.tri;\r\n    meshData.vert_to_tri = [];\r\n    const vConnectivity = meshData.vert_to_tri;\r\n\r\n    for (let itri = 0; itri < triangles.length; itri++) {\r\n        for (let node = 0; node < 3; node++) {\r\n            if (vConnectivity[triangles[itri][node]] == undefined)\r\n                vConnectivity[triangles[itri][node]] = [itri];\r\n            else\r\n                vConnectivity[triangles[itri][node]].push(itri);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEdgeIntersections(meshData, iedge) {\r\n    const triangles = meshData.tri;\r\n    const verts = meshData.scaled_vert;\r\n    const adjacency = meshData.adj;\r\n    const con_edges = meshData.con_edge;\r\n    const vert2tri = meshData.vert_to_tri;\r\n\r\n    const edge_v0_ind = con_edges[iedge][0];\r\n    const edge_v1_ind = con_edges[iedge][1];\r\n    const edge_coords = [verts[edge_v0_ind], verts[edge_v1_ind]];\r\n\r\n    const tri_around_v0 = vert2tri[edge_v0_ind];\r\n\r\n    let edge_in_triangulation = false;\r\n\r\n    //stores the index of tri that intersects current edge,\r\n    //and the edge-index of intersecting edge in triangle\r\n    const intersections = [];\r\n\r\n    for (let itri = 0; itri < tri_around_v0.length; itri++) {\r\n        const cur_tri = triangles[tri_around_v0[itri]];\r\n        const v0_node = cur_tri.indexOf(edge_v0_ind);\r\n        const v0p1_node = (v0_node + 1) % 3;\r\n        const v0p2_node = (v0_node + 2) % 3;\r\n\r\n        if (edge_v1_ind == cur_tri[v0p1_node]) {\r\n            //constrained edge is an edge of the current tri (node v0_node to v0_node+1)\r\n            edge_in_triangulation = true;\r\n            break;\r\n        } else if (edge_v1_ind == cur_tri[v0p2_node]) {\r\n            //constrained edge is an edge of the current tri (node v0_node to v0_node+2)\r\n            edge_in_triangulation = true;\r\n            break;\r\n        }\r\n\r\n        const opposite_edge_coords = [verts[cur_tri[v0p1_node]], verts[cur_tri[v0p2_node]]];\r\n        if (isEdgeIntersecting(edge_coords, opposite_edge_coords)) {\r\n            intersections.push([tri_around_v0[itri], v0_node]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (!edge_in_triangulation) {\r\n        if (intersections.length == 0)\r\n            throw \"Cannot have no intersections!\";\r\n\r\n        while (true) { // eslint-disable-line no-constant-condition\r\n            const prev_intersection = intersections[intersections.length - 1]; //[tri ind][node ind for edge]\r\n            const tri_ind = adjacency[prev_intersection[0]][prev_intersection[1]];\r\n\r\n            if (triangles[tri_ind][0] == edge_v1_ind ||\r\n                triangles[tri_ind][1] == edge_v1_ind ||\r\n                triangles[tri_ind][2] == edge_v1_ind) {\r\n                break; //found the end node of the edge\r\n            }\r\n\r\n            //Find the index of the edge from which we came into this triangle\r\n            const prev_edge_ind = adjacency[tri_ind].indexOf(prev_intersection[0]);\r\n            if (prev_edge_ind == -1)\r\n                throw \"Could not find edge!\";\r\n\r\n            const cur_tri = triangles[tri_ind];\r\n\r\n            //Loop over the other two edges in this triangle,\r\n            //and check if they intersect the constrained edge\r\n            for (let offset = 1; offset < 3; offset++) {\r\n                const v0_node = (prev_edge_ind + offset + 1) % 3;\r\n                const v1_node = (prev_edge_ind + offset + 2) % 3;\r\n                const cur_edge_coords = [verts[cur_tri[v0_node]], verts[cur_tri[v1_node]]];\r\n\r\n                if (isEdgeIntersecting(edge_coords, cur_edge_coords)) {\r\n                    intersections.push([tri_ind, (prev_edge_ind + offset) % 3]);\r\n                    break;\r\n                }\r\n            }\r\n\r\n        } //while intersections not found\r\n    } //if edge not in triangulation\r\n\r\n    return intersections;\r\n}\r\n\r\nfunction fixEdgeIntersections(meshData, intersectionList, con_edge_ind, newEdgeList) {\r\n    const triangles = meshData.tri;\r\n    const verts = meshData.scaled_vert;\r\n    const adjacency = meshData.adj;\r\n    const con_edges = meshData.con_edge;\r\n\r\n    //Node indices and endpoint coords of current constrained edge\r\n    const con_edge_nodes = con_edges[con_edge_ind];\r\n    const cur_con_edge_coords = [verts[con_edge_nodes[0]], verts[con_edge_nodes[1]]];\r\n\r\n    const nIntersections = intersectionList.length;\r\n    for (let i = 0; i < nIntersections; i++) {\r\n        //Looping in reverse order is important since then the\r\n        //indices in intersectionList remain unaffected by any diagonal swaps\r\n        const tri0_ind = intersectionList[nIntersections - 1 - i][0];\r\n        const tri0_node = intersectionList[nIntersections - 1 - i][1];\r\n\r\n        const tri1_ind = adjacency[tri0_ind][tri0_node];\r\n        const tri1_node = adjacency[tri1_ind].indexOf(tri0_ind);\r\n\r\n        const quad_v0 = verts[triangles[tri0_ind][tri0_node]];\r\n        const quad_v1 = verts[triangles[tri0_ind][(tri0_node + 1) % 3]];\r\n        const quad_v2 = verts[triangles[tri1_ind][tri1_node]];\r\n        const quad_v3 = verts[triangles[tri0_ind][(tri0_node + 2) % 3]];\r\n\r\n        const isConvex = isQuadConvex(quad_v0, quad_v1, quad_v2, quad_v3);\r\n\r\n        if (isConvex) {\r\n            swapDiagonal(meshData, tri0_ind, tri1_ind);\r\n\r\n            const newDiagonal_nodes = [triangles[tri0_ind][tri0_node], triangles[tri1_ind][tri1_node]];\r\n\r\n            const newDiagonal_coords = [quad_v0, quad_v2];\r\n            const hasCommonNode = (newDiagonal_nodes[0] == con_edge_nodes[0] || newDiagonal_nodes[0] == con_edge_nodes[1] ||\r\n                newDiagonal_nodes[1] == con_edge_nodes[0] || newDiagonal_nodes[1] == con_edge_nodes[1]);\r\n            if (hasCommonNode || !isEdgeIntersecting(cur_con_edge_coords, newDiagonal_coords)) {\r\n                newEdgeList.push([newDiagonal_nodes[0], newDiagonal_nodes[1]]);\r\n            }\r\n\r\n        } //is convex\r\n\r\n    } //loop over intersections\r\n}\r\n\r\nfunction loadEdges(meshData, edges) {\r\n    const nVertex = meshData.vert.length;\r\n\r\n    meshData.con_edge = [];\r\n\r\n    for (let i = 0; i < edges.length; i++) {\r\n        const edge = edges[i];\r\n\r\n        if (edge[0] < 0 || edge[0] >= nVertex ||\r\n            edge[1] < 0 || edge[1] >= nVertex) {\r\n            throw (`Vertex indices of edge ${i} need to be non-negative and less than the number of input vertices.`);\r\n            // meshData.con_edge = [];\r\n            // break;\r\n        }\r\n\r\n        if (edge[0] === edge[1]) {\r\n            throw(`Edge ${i} is degenerate!`);\r\n            // meshData.con_edge = [];\r\n            // break;\r\n        }\r\n\r\n        if (!isEdgeValid(edge, meshData.con_edge, meshData.vert)) {\r\n            throw(`Edge ${i} already exists or intersects with an existing edge!`);\r\n            // meshData.con_edge = [];\r\n            // break;\r\n        }\r\n\r\n        meshData.con_edge.push([edge[0], edge[1]]);\r\n    }\r\n}\r\n\r\nfunction isEdgeValid(newEdge, edgeList, vertices) {\r\n    const new_edge_verts = [vertices[newEdge[0]], vertices[newEdge[1]]];\r\n\r\n    for (let i = 0; i < edgeList.length; i++) {\r\n        //Not valid if edge already exists\r\n        if ((edgeList[i][0] == newEdge[0] && edgeList[i][1] == newEdge[1]) ||\r\n            (edgeList[i][0] == newEdge[1] && edgeList[i][1] == newEdge[0]))\r\n            return false;\r\n\r\n        const hasCommonNode = (edgeList[i][0] == newEdge[0] || edgeList[i][0] == newEdge[1] ||\r\n            edgeList[i][1] == newEdge[0] || edgeList[i][1] == newEdge[1]);\r\n\r\n        const edge_verts = [vertices[edgeList[i][0]], vertices[edgeList[i][1]]];\r\n\r\n        if (!hasCommonNode && isEdgeIntersecting(edge_verts, new_edge_verts))\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default function (points, edges, z) {\r\n    if (!edges) edges = [];\r\n    if (typeof points !== \"object\" || points.type !== \"FeatureCollection\") throw \"Argument points must be FeatureCollection\";\r\n    if (!Array.isArray(edges)) throw \"Argument points must be Array of Array\";\r\n    if (z && typeof z !== \"string\") throw \"Argument z must be string\";\r\n    let isPointZ = false;\r\n    // Caluculating scale factor\r\n    // Original cdt-js not working well with coordinates between (0,0)-(1,1)\r\n    // So points must be normalized\r\n    const xyzs = points.features.reduce((prev, point) => {\r\n        const xy = point.geometry.coordinates;\r\n        prev[0].push(xy[0]);\r\n        prev[1].push(xy[1]);\r\n        if (z) {\r\n            prev[2].push(point.properties[z]);\r\n        } else if (xy.length === 3) {\r\n            isPointZ = true;\r\n            prev[2].push(point.geometry.coordinates[2]);\r\n        }\r\n        return prev;\r\n    }, [[], [], []]);\r\n    const xMax = Math.max.apply(null, xyzs[0]);\r\n    const xMin = Math.min.apply(null, xyzs[0]);\r\n    const yMax = Math.max.apply(null, xyzs[1]);\r\n    const yMin = Math.min.apply(null, xyzs[1]);\r\n    const xDiff = xMax - xMin;\r\n    const xCenter = (xMax + xMin) / 2.0;\r\n    const yDiff = yMax - yMin;\r\n    const yCenter = (yMax + yMin) / 2.0;\r\n    const maxDiff = Math.max(xDiff, yDiff) * 1.1;\r\n    // Normalize points\r\n    const normPoints = points.features.map((point) => {\r\n        const xy = point.geometry.coordinates;\r\n        const normXy = [\r\n            (xy[0] - xCenter) / maxDiff + 0.5,\r\n            (xy[1] - yCenter) / maxDiff + 0.5\r\n        ];\r\n        return new Point(normXy[0], normXy[1]);\r\n    });\r\n    // Create data structure for cdt-js\r\n    const meshData = {\r\n        vert: normPoints\r\n    };\r\n    // Load edges to data structure, with checking error\r\n    loadEdges(meshData, edges);\r\n    // Calculating Delaunay\r\n    delaunay(meshData);\r\n    // Applying edges constrain\r\n    constrainEdges(meshData);\r\n    // Unnormalize points and create output results\r\n    const keys = ['a', 'b', 'c'];\r\n    return featureCollection(meshData.tri.map((indices) => {\r\n        const properties = {};\r\n        const coords = indices.map((index, i) => {\r\n            const coord = [xyzs[0][index], xyzs[1][index]];\r\n            if (xyzs[2][index] !== undefined) {\r\n                if (isPointZ) {\r\n                    coord[2] = xyzs[2][index];\r\n                } else {\r\n                    properties[keys[i]] = xyzs[2][index];\r\n                }\r\n            }\r\n            return coord;\r\n        })\r\n        coords[3] = coords[0];\r\n        return polygon([coords], properties);\r\n    }));\r\n}"],"file":"constrained-tin.js"}